# TerraME - a software platform for multiple scale spatially-explicit dynamic modeling.
# Copyright (C) 2001-2014 INPE and TerraLAB/UFOP.
#
# This file is part of the TerraME framework.
# This framework is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library.
#
# The authors reassure the license terms regarding the warranties.
# They specifically disclaim any warranties, including, but not limited to,
# the implied warranties of merchantability and fitness for a particular purpose.
# The framework provided hereunder is on an "as is" basis, and the authors have no
# obligation to provide maintenance, support, updates, enhancements, or modifications.
# In no event shall INPE and TerraLAB / UFOP be held liable to any party for direct,
# indirect, special, incidental, or caonsequential damages arising out of the use
# of this library and its documentation.
#
# Authors: Pedro R. Andrade (pedro.andrade@inpe.br)
#          Rodrigo Avancini
#

include (BundleUtilities) 
include(InstallRequiredSystemLibraries)

set(TERRAME_BUILD_AS_BUNDLE @TERRAME_BUILD_AS_BUNDLE@)

file(GLOB_RECURSE TERRAME_PLGS ${CMAKE_INSTALL_PREFIX}/*@CMAKE_SHARED_LIBRARY_SUFFIX@)

if(APPLE AND TERRAME_BUILD_AS_BUNDLE)
  set(BU_CHMOD_BUNDLE_ITEMS ON)
  set(TERRAME_APPLICATION ${CMAKE_INSTALL_PREFIX}/terrame.app)
  set(TERRAME_PATHS "@Qt5_DIR@/../..;@TERRAME_DEPENDENCIES_DIR@/lib;@TERRALIB_3RDPARTY_DIR@/lib;@TERRAME_LIBRARIES@;@TERRALIB_DIR@/lib;@TERRALIB_DIR@/bin;/usr/local/lib;/usr/lib")
elseif(WIN32)
  set(TERRAME_APPLICATION ${CMAKE_INSTALL_PREFIX}/bin/terrame.exe)
  set(TERRAME_PATHS "@Qt5_DIR@/../../../bin;@TERRAME_DEPENDENCIES_DIR@/bin;@TERRALIB_3RDPARTY_DIR@/lib;@TERRALIB_DIR@/lib;@MSVC_REDIST_DIR@")
endif()

if(APPLE AND TERRAME_BUILD_AS_BUNDLE)
    # Overload function
	function(gp_item_default_embedded_path item default_embedded_path_var)
		set (is_System FALSE)
		set (is_QImageFormat FALSE)
		set (is_QIconEngine FALSE)
		set (is_QSQLDrivers FALSE)
		set (is_QPlatforms FALSE)
		set (is_Lib FALSE)
		
		get_filename_component (resolved_file ${item} PATH)

		if("${resolved_file}" STREQUAL "")
			set (is_Lib TRUE)
		elseif(resolved_file MATCHES "^(@rpath)")
			set(is_Lib TRUE)
		elseif(resolved_file MATCHES "^(/System/Library/|/usr/lib/|/usr/local|@loader_path)")
			set(is_System TRUE)
		elseif(resolved_file MATCHES "(imageformats)$")
			set (is_QImageFormat TRUE)
		elseif(resolved_file MATCHES "(iconengines)$")
			set (is_QIconEngine TRUE)
		elseif(resolved_file MATCHES "(sqldrivers)$")
			set (is_QSQLDrivers TRUE)
		elseif(resolved_file MATCHES "(platforms)$")
			set (is_QPlatforms TRUE)
		elseif(resolved_file MATCHES "(lib)$")
			set (is_Lib TRUE)
		endif()

		if(item MATCHES "\\.dylib$")
			if(is_System)
				set(${default_embedded_path_var} "@executable_path/../lib" PARENT_SCOPE)
			elseif(is_QImageFormat)
				set(${default_embedded_path_var} "@executable_path/../qtplugins/imageformats" PARENT_SCOPE)
			elseif(is_QIconEngine)
				set(${default_embedded_path_var} "@executable_path/../qtplugins/iconengines" PARENT_SCOPE)
			elseif(is_QSQLDrivers)
				set(${default_embedded_path_var} "@executable_path/../qtplugins/sqldrivers" PARENT_SCOPE)
			elseif(is_QPlatforms)
				set(${default_embedded_path_var} "@executable_path/../qtplugins/platforms" PARENT_SCOPE)
			elseif(is_Lib)
				set(${default_embedded_path_var} "@executable_path/../lib" PARENT_SCOPE)
			else()
				set(${default_embedded_path_var} "${resolved_file}" PARENT_SCOPE)
			endif()
		elseif(item MATCHES "[^/]+\\.framework/")
			set(${default_embedded_path_var} "@executable_path/../Frameworks" PARENT_SCOPE)
		endif()
	endfunction()
endif()

# Call fixup_bundle
fixup_bundle("${TERRAME_APPLICATION}" "${TERRAME_PLGS}" "${TERRAME_PATHS}")
